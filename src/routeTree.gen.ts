/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MenuRouteImport } from './routes/menu'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrderNewRouteImport } from './routes/order/new'
import { Route as OrderOrderIdRouteImport } from './routes/order/$orderId'

const MenuRoute = MenuRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => rootRouteImport,
} as any)
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderNewRoute = OrderNewRouteImport.update({
  id: '/order/new',
  path: '/order/new',
  getParentRoute: () => rootRouteImport,
} as any)
const OrderOrderIdRoute = OrderOrderIdRouteImport.update({
  id: '/order/$orderId',
  path: '/order/$orderId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/menu': typeof MenuRoute
  '/order/$orderId': typeof OrderOrderIdRoute
  '/order/new': typeof OrderNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/menu': typeof MenuRoute
  '/order/$orderId': typeof OrderOrderIdRoute
  '/order/new': typeof OrderNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/menu': typeof MenuRoute
  '/order/$orderId': typeof OrderOrderIdRoute
  '/order/new': typeof OrderNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cart' | '/menu' | '/order/$orderId' | '/order/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cart' | '/menu' | '/order/$orderId' | '/order/new'
  id: '__root__' | '/' | '/cart' | '/menu' | '/order/$orderId' | '/order/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  MenuRoute: typeof MenuRoute
  OrderOrderIdRoute: typeof OrderOrderIdRoute
  OrderNewRoute: typeof OrderNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/menu': {
      id: '/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof MenuRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order/new': {
      id: '/order/new'
      path: '/order/new'
      fullPath: '/order/new'
      preLoaderRoute: typeof OrderNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/order/$orderId': {
      id: '/order/$orderId'
      path: '/order/$orderId'
      fullPath: '/order/$orderId'
      preLoaderRoute: typeof OrderOrderIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  MenuRoute: MenuRoute,
  OrderOrderIdRoute: OrderOrderIdRoute,
  OrderNewRoute: OrderNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
